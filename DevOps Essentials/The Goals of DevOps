Hey and welcome to this lesson in the DevOps Essentials course. This lesson is called The Goals of DevOps and we're going to start talking about DevOps culture and 
a major component of that culture has to do with shared goals, so we're going to talk about in detail the shared goals that are part of DevOps culture. As we've already 
talked about, DevOps culture is about collaboration between development and operations, but in order to understand this, it's important to understand this traditional model
that DevOps culture is a response to. Under the traditional model, development and operations are considered two separate entities and they have different and opposing goals.
The goal of the development team is to deliver features into the hands of the customer as quickly as possible, so their goal is speed. But the goal of the operations team is
to maintain the stability of the system and minimize downtime. These two goals end up becoming an opposition to one another because one of the worst things for stability is
changes. Every time you change the system, you introduce a risk of instability, so operations is trying to maintain stability, while the development team is trying to deploy
as many changes as possible. In order for them to deliver features into the hands of customers, they have to deploy changes and every one of those changes introduces a risk
for stability. So these two goals are in opposition to one another and even if these two teams want to collaborate many times, they wind up being in opposition because of
these different and opposite goals. In fact, development teams are often measured according to their speed of delivery, while operations teams are measured according to
minimizing downtime. So they have a great incentive to fight against each other to be in opposition to one another. Now, both speed and stability are very important goals.
But because the development and operations teams are in opposition to one another, neither is able to accomplish those goals as well as they should be able to. The development
team is always deploying changes and not really prioritizing stability, while the operations team is trying to slow down the development team in order to maintain stability,
and so this opposition compromises both of these goals to some degree. But let's look at how these goals function within a DevOps culture. In a DevOps culture, the 
development and operations teams are one group and they both share the same goals and they're both measured according to those same goals. Both speed and stability
are very important. What DevOps culture has discovered is that when development and operations come together and share the same goals and prioritize speed and stability
equally, they're able to find solutions and build tools that can allow an organization to have both speed and stability, to allow development to deploy frequently,
to deploy quickly, to make changes to the system in a way that is robust, standardized and allows the system to maintain stability for customers. And therefore,
both of these goals wind up being met in a much more robust way than when you have two separate groups fighting against each other. So in a DevOps culture, 
development and operations are playing on the same team, you can almost picture like a sports team. In a traditional culture, development and operations are
on opposing teams. In order for one team to win the other team has to lose, in order to have good speed of delivery stability has to be compromised, or in
order to maintain good stability speed of delivery has to be compromised. But in a DevOps culture, development and operations are playing on the same team. 
What's important about this is the fact that they have shared goals and usually shared measurements. That means developers are being held accountable for 
stability just as much as they're being held accountable for speed of delivery and operations engineers are being held accountable for speed of delivery, 
just as much as they're being held accountable for stability. So let's look at some of the goals that a DevOps culture might have and all of these goals really boil 
down to those two things, stability and speed of delivery. One of the goals that is shared by development and operations in a DevOps organization is fast time-to-market. 
Time-to-market is the time that it takes to take some work that a development team has created and get it in front of a customer. So the time from code being finished to 
deploy to production and working, that's  time-to-market and the faster that time-to-market is, the more successful the organization will be. Another goal is minimizing 
production failures, this goes back to stability. The more production failures there are, the more instability there is so if we want production to be stable, we need to 
make sure that there are few production failures and we need to find solutions that will allow us to deploy quickly so that we get that fast time to market while also 
minimizing the number of failures that are caused by those changes. Another goal that goes back to stability is immediate recovery from failures. In the real world 
failures are going to happen, mistakes are going to be made, things are going to break. Any organization that doesn't recognize that is deluding themselves because it's 
always gonna happen. So what do you do? The best thing you can do is to ensure that when those problems do happen, you can recover from them quickly and immediately. The 
faster you can recover from problems, the less impact they will have. Best case scenario is you can recover from a failure before customers even notice, and engineers in 
the DevOps culture will work to make that a possibility. So DevOps is about development and operations working together and in a DevOps culture, developers care just as much 
about stability as they care about speed and ops cares just as much about speed as they do about stability. In a DevOps culture, the traditional roles of developers and operations 
engineers can even become blurred. That is, developers can take on more and more responsibilities of operations engineers while operations engineers take on more and more 
responsibilities that look a little bit like development. There's no hard and fast rule for what this looks like but when the two groups are working together, the roles tend 
to kind of blend a little bit. In a traditional culture, developers throw code over the wall when it's done and wait for operations to get it deployed. But instead of throwing 
it over the wall, there is no wall in a DevOps culture. Dev and Ops work together to create and use tools and processes that support both speed and stability, and it's required 
for developers and operations to work together in order to create and support those tools. DevOps recognizes that development and operations are much more powerful when they're 
together. Now I hope you understand a little bit better what a DevOps culture looks like. In the next lesson, we'll tell some stories that will actually help us understand the 
differences between a traditional culture and a DevOps culture in a very practical way.